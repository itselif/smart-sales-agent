{
  "openapi": "3.0.1",
  "info": {
    "title": "salesai-salesmanagement-service API",
    "description": "Handles sales transactions for sellers and managers, including corrections, auditing, change tracking, and real-time/historical analytics endpoints for dashboards. Provides store-level data isolation, supports correction/audit history, and enables data feeds for reporting and analytics with strong compliance and RBAC.",
    "version": "1.0.0"
  },
  "servers": [],
  "paths": {
    "/saletransactions/{saleTransactionId}": {
      "get": {
        "tags": [
          "saleTransaction"
        ],
        "summary": "The getSaleTransaction API has 1 parameter.",
        "description": "getSaleTransaction",
        "parameters": [
          {
            "name": "saleTransactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getSaleTransaction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/getSaleTransaction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/getSaleTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransaction** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSaleTransaction-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSaleTransaction-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSaleTransaction-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "saleTransaction"
        ],
        "summary": "The updateSaleTransaction API has 5 parameters.",
        "description": "updateSaleTransaction",
        "parameters": [
          {
            "name": "saleTransactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateSaleTransaction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/updateSaleTransaction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/updateSaleTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransaction** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSaleTransaction-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSaleTransaction-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/updateSaleTransaction-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "saleTransaction"
        ],
        "summary": "The deleteSaleTransaction API has 1 parameter.",
        "description": "deleteSaleTransaction",
        "parameters": [
          {
            "name": "saleTransactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteSaleTransaction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteSaleTransaction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/deleteSaleTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransaction** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteSaleTransaction-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteSaleTransaction-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteSaleTransaction-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/saletransactions": {
      "post": {
        "tags": [
          "saleTransaction"
        ],
        "summary": "The createSaleTransaction API has 5 parameters.",
        "description": "createSaleTransaction",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createSaleTransaction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/createSaleTransaction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/createSaleTransaction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransaction** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createSaleTransaction-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/createSaleTransaction-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/createSaleTransaction-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "saleTransactions"
        ],
        "summary": "The listSaleTransactions API has no parameters.",
        "description": "listSaleTransactions",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/listSaleTransactions"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/listSaleTransactions"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/listSaleTransactions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransactions** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listSaleTransactions-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/listSaleTransactions-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/listSaleTransactions-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/saletransactionhistories/{saleTransactionHistoryId}": {
      "get": {
        "tags": [
          "saleTransactionHistory"
        ],
        "summary": "The getSaleTransactionHistory API has 1 parameter.",
        "description": "getSaleTransactionHistory",
        "parameters": [
          {
            "name": "saleTransactionHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getSaleTransactionHistory"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/getSaleTransactionHistory"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/getSaleTransactionHistory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransactionHistory** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSaleTransactionHistory-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSaleTransactionHistory-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/getSaleTransactionHistory-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "saleTransactionHistory"
        ],
        "summary": "The deleteSaleTransactionHistory API has 1 parameter.",
        "description": "deleteSaleTransactionHistory",
        "parameters": [
          {
            "name": "saleTransactionHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteSaleTransactionHistory"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteSaleTransactionHistory"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/deleteSaleTransactionHistory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransactionHistory** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteSaleTransactionHistory-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteSaleTransactionHistory-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteSaleTransactionHistory-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/saletransactionhistories": {
      "post": {
        "tags": [
          "saleTransactionHistory"
        ],
        "summary": "The createSaleTransactionHistory API has 7 parameters.",
        "description": "createSaleTransactionHistory",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createSaleTransactionHistory"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/createSaleTransactionHistory"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/createSaleTransactionHistory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransactionHistory** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createSaleTransactionHistory-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/createSaleTransactionHistory-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/createSaleTransactionHistory-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "saleTransactionHistories"
        ],
        "summary": "The listSaleTransactionHistories API has no parameters.",
        "description": "listSaleTransactionHistories",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/listSaleTransactionHistories"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/listSaleTransactionHistories"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/listSaleTransactionHistories"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response JSON represents the most comprehensive form of the **saleTransactionHistories** object in the response. However, some properties may be omitted based on the object&#39;s internal logic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listSaleTransactionHistories-Response"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/listSaleTransactionHistories-Response"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/listSaleTransactionHistories-Response"
                }
              }
            }
          },
          "400": {
            "description": "The request was improperly formatted or contained invalid parameters, preventing the server from processing it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The request lacked valid authentication credentials or the credentials provided do not grant access to the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource was not found on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition that prevented it from fulfilling the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "errCode": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "getSaleTransaction": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "updateSaleTransaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "correctionJustification": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "deleteSaleTransaction": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "createSaleTransaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "nullable": false
          },
          "currency": {
            "type": "string",
            "nullable": false
          },
          "transactionDate": {
            "type": "string",
            "nullable": false
          },
          "status": {
            "type": "string",
            "nullable": false
          },
          "correctionJustification": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "listSaleTransactions": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "getSaleTransactionHistory": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "deleteSaleTransactionHistory": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "createSaleTransactionHistory": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "nullable": false
          },
          "changeType": {
            "type": "string",
            "nullable": false
          },
          "changedByUserId": {
            "type": "string",
            "nullable": false
          },
          "changeTimestamp": {
            "type": "string",
            "nullable": false
          },
          "correctionJustification": {
            "type": "string",
            "nullable": true
          },
          "previousData": {
            "type": "object",
            "nullable": false
          },
          "newData": {
            "type": "object",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "listSaleTransactionHistories": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "getSaleTransaction-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "number"
          },
          "saleTransaction": {
            "$ref": "#/components/schemas/saleTransaction-object"
          }
        }
      },
      "updateSaleTransaction-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "number"
          },
          "saleTransaction": {
            "$ref": "#/components/schemas/saleTransaction-object"
          }
        }
      },
      "deleteSaleTransaction-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "number"
          },
          "saleTransaction": {
            "$ref": "#/components/schemas/saleTransaction-object"
          }
        }
      },
      "createSaleTransaction-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "number"
          },
          "saleTransaction": {
            "$ref": "#/components/schemas/saleTransaction-object"
          }
        }
      },
      "listSaleTransactions-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "string"
          },
          "saleTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/saleTransactions-object"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/paging-object"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uiPermissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "getSaleTransactionHistory-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "number"
          },
          "saleTransactionHistory": {
            "$ref": "#/components/schemas/saleTransactionHistory-object"
          }
        }
      },
      "deleteSaleTransactionHistory-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "number"
          },
          "saleTransactionHistory": {
            "$ref": "#/components/schemas/saleTransactionHistory-object"
          }
        }
      },
      "createSaleTransactionHistory-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "number"
          },
          "saleTransactionHistory": {
            "$ref": "#/components/schemas/saleTransactionHistory-object"
          }
        }
      },
      "listSaleTransactionHistories-Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "elapsedMs": {
            "type": "number"
          },
          "ssoTime": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "cacheKey": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          },
          "rowCount": {
            "type": "string"
          },
          "saleTransactionHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/saleTransactionHistories-object"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/paging-object"
          },
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uiPermissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "saleTransaction-object": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "saleTransactions-object": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "paging-object": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "number"
          },
          "pageRowCount": {
            "type": "number"
          },
          "totalRowCount": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        }
      },
      "saleTransactionHistory-object": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "saleTransactionHistories-object": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \\r\\n\\r\\n \r\n  Enter 'Bearer' [space] and then your token in the text input below.\r\n                      \\r\\n\\r\\nExample: 'Bearer 12345abcdef'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
